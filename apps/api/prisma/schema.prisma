generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                 @id @default(cuid())
  name                  String
  createdAt             DateTime               @default(now())
  region                String                 @default("us-east-1")
  language              String                 @default("en-US")
  currency              String                 @default("USD")
  data_policy_accepted  Boolean                @default(false)
  metadata              Json?
  subscriptionStatus    String?                @default("trial")
  subscriptionTier      String?                @default("starter")
  trialEndsAt           DateTime?
  subscriptionEndsAt    DateTime?
  stripeCustomerId      String?                @unique
  stripeSubscriptionId  String?                @unique
  organizationId        String?
  serviceLevel          String?                @default("self_service")
  managedServicesActive Boolean                @default(false)
  dedicatedManager      String?
  monthlySkuQuota       Int?
  skusAddedThisMonth    Int                    @default(0)
  items                 InventoryItem[]
  photos                PhotoAsset[]
  performance           ProductPerformance[]
  syncJobs              SyncJob[]
  organization          Organization?          @relation(fields: [organizationId], references: [id])
  users                 UserTenant[] // Many-to-many relationship with users
  googleOAuthAccounts   GoogleOAuthAccount[]
  organizationRequests  OrganizationRequest[] // Requests to join organizations
  businessProfile       TenantBusinessProfile?

  @@index([name])
  @@index([subscriptionStatus])
  @@index([organizationId])
  @@index([serviceLevel])
}

model Organization {
  id                   String                @id @default(cuid())
  name                 String
  ownerId              String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  subscriptionTier     String?               @default("chain_starter")
  subscriptionStatus   String?               @default("trial")
  trialEndsAt          DateTime?
  subscriptionEndsAt   DateTime?
  stripeCustomerId     String?               @unique
  stripeSubscriptionId String?               @unique
  maxLocations         Int                   @default(5)
  maxTotalSKUs         Int                   @default(2500)
  metadata             Json?
  tenants              Tenant[]
  organizationRequests OrganizationRequest[] // Requests from tenants to join

  @@index([ownerId])
  @@index([subscriptionStatus])
  @@map("organization")
}

model InventoryItem {
  id                   String                   @id @default(cuid())
  tenantId             String
  sku                  String
  name                 String
  priceCents           Int
  stock                Int                      @default(0)
  imageUrl             String?
  metadata             Json?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  marketingDescription String?
  imageGallery         String[]                 @default([])
  customCta            Json?
  socialLinks          Json?
  customBranding       Json?
  customSections       Json[]                   @default([])
  landingPageTheme     String?                  @default("default")
  auditLogId           String?
  availability         AvailabilityStatus       @default(in_stock)
  brand                String
  categoryPath         String[]                 @default([])
  condition            ProductCondition?        @default(new)
  currency             String                   @default("USD") @db.Char(3)
  description          String?
  eligibilityReason    String?
  gtin                 String?
  itemStatus           ItemStatus?              @default(active)
  locationId           String?
  merchantName         String?
  mpn                  String?
  price                Decimal                  @db.Decimal(12, 2)
  quantity             Int?
  searchTsv            Unsupported("tsvector")?
  syncStatus           SyncStatus?              @default(pending)
  syncedAt             DateTime?
  title                String
  visibility           ItemVisibility?          @default(public)
  manufacturer         String?
  tenant               Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  photos               PhotoAsset[]
  performance          ProductPerformance[]

  @@unique([tenantId, sku], name: "uq_tenant_sku")
  @@index([tenantId, updatedAt])
}

model PhotoAsset {
  id              String        @id @default(cuid())
  tenantId        String
  inventoryItemId String
  url             String
  width           Int?
  height          Int?
  contentType     String?
  bytes           Int?
  exifRemoved     Boolean       @default(false)
  capturedAt      DateTime?
  createdAt       DateTime      @default(now())
  publicUrl       String?
  signedUrl       String?
  position        Int           @default(0)
  alt             String?
  caption         String?
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([inventoryItemId, position])
  @@index([tenantId])
  @@index([inventoryItemId])
  @@index([capturedAt])
  @@index([inventoryItemId, position])
}

model ProductPerformance {
  id              String        @id @default(cuid())
  itemId          String
  tenantId        String
  date            DateTime      @db.Date
  approvalStatus  String?
  rejectionReason String?
  impressions     Int           @default(0)
  clicks          Int           @default(0)
  ctr             Decimal       @default(0) @db.Decimal(5, 2)
  conversions     Int           @default(0)
  revenue         Decimal       @default(0) @db.Decimal(12, 2)
  visibilityScore Int           @default(0)
  searchRank      Int?
  lastUpdated     DateTime      @default(now())
  createdAt       DateTime      @default(now())
  item            InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([itemId, date])
  @@index([tenantId, date(sort: Desc)])
  @@index([approvalStatus])
}

model SyncJob {
  id        String   @id @default(cuid())
  tenantId  String
  target    String
  status    String   @default("queued")
  attempt   Int      @default(0)
  payload   Json
  lastError String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  source    String   @default("manual")
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status, updatedAt])
}

model GoogleOAuthAccount {
  id                String               @id @default(cuid())
  tenantId          String               @map("tenant_id")
  googleAccountId   String               @map("google_account_id")
  email             String
  displayName       String?              @map("display_name")
  profilePictureUrl String?              @map("profile_picture_url")
  scopes            String[]
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  gbpLocations      GbpLocation[]
  merchantLinks     GoogleMerchantLink[]
  tenant            Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tokens            GoogleOAuthToken?

  @@unique([tenantId, googleAccountId])
  @@map("google_oauth_accounts")
}

model GoogleOAuthToken {
  id                    String             @id @default(cuid())
  accountId             String             @unique @map("account_id")
  accessTokenEncrypted  String             @map("access_token_encrypted")
  refreshTokenEncrypted String             @map("refresh_token_encrypted")
  tokenType             String             @default("Bearer") @map("token_type")
  expiresAt             DateTime           @map("expires_at")
  scopes                String[]
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  account               GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("google_oauth_tokens")
}

model GoogleMerchantLink {
  id           String             @id @default(cuid())
  accountId    String             @map("account_id")
  merchantId   String             @map("merchant_id")
  merchantName String?            @map("merchant_name")
  websiteUrl   String?            @map("website_url")
  isActive     Boolean            @default(true) @map("is_active")
  lastSyncAt   DateTime?          @map("last_sync_at")
  syncStatus   String?            @default("pending") @map("sync_status")
  syncError    String?            @map("sync_error")
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  account      GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([merchantId])
  @@map("google_merchant_links")
}

model GbpLocation {
  id            String             @id @default(cuid())
  accountId     String             @map("account_id")
  locationId    String             @map("location_id")
  locationName  String             @map("location_name")
  storeCode     String?            @map("store_code")
  address       String?
  phoneNumber   String?            @map("phone_number")
  websiteUrl    String?            @map("website_url")
  category      String?
  isVerified    Boolean?           @default(false) @map("is_verified")
  isPublished   Boolean?           @default(false) @map("is_published")
  lastFetchedAt DateTime?          @map("last_fetched_at")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  insights      GbpInsightDaily[]
  account       GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, locationId])
  @@map("gbp_locations")
}

model GbpInsightDaily {
  id                String      @id @default(cuid())
  locationId        String      @map("location_id")
  date              DateTime    @db.Date
  viewsSearch       Int         @default(0) @map("views_search")
  viewsMaps         Int         @default(0) @map("views_maps")
  actionsWebsite    Int         @default(0) @map("actions_website")
  actionsPhone      Int         @default(0) @map("actions_phone")
  actionsDirections Int         @default(0) @map("actions_directions")
  photosCount       Int         @default(0) @map("photos_count")
  createdAt         DateTime    @default(now()) @map("created_at")
  location          GbpLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, date])
  @@index([locationId, date])
  @@map("gbp_insights_daily")
}

model AuditLog {
  id          String      @id @default(cuid())
  tenantId    String      @map("tenant_id")
  actorId     String      @map("actor_id")
  actorType   ActorType   @map("actor_type")
  diff        Json
  entityId    String      @map("entity_id")
  entityType  EntityType  @map("entity_type")
  ip          String?
  metadata    Json        @default("{}")
  occurredAt  DateTime    @default(now()) @map("occurred_at")
  piiScrubbed Boolean     @default(true) @map("pii_scrubbed")
  requestId   String?     @map("request_id")
  userAgent   String?     @map("user_agent")
  action      AuditAction

  @@index([tenantId, occurredAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([actorType, actorId])
  @@index([requestId])
  @@map("audit_log")
}

model PlatformSettings {
  id                  Int      @id @default(1) @map("id")
  platformName        String?  @map("platform_name")
  platformDescription String?  @map("platform_description")
  logoUrl             String?  @map("logo_url")
  faviconUrl          String?  @map("favicon_url")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("platform_settings")
}

model SkuBillingPolicy {
  id                 String    @id @default(cuid())
  scope              String    @default("global")
  countActivePrivate Boolean   @map("count_active_private")
  countPreorder      Boolean   @map("count_preorder")
  countZeroPrice     Boolean   @map("count_zero_price")
  requireImage       Boolean   @map("require_image")
  requireCurrency    Boolean   @map("require_currency")
  note               String?
  updatedBy          String?   @map("updated_by")
  effectiveFrom      DateTime? @map("effective_from")
  effectiveTo        DateTime? @map("effective_to")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("sku_billing_policy")
}

model SkuBillingPolicyHistory {
  id                 String    @id @default(cuid())
  scope              String    @default("global")
  effectiveFrom      DateTime  @map("effective_from")
  effectiveTo        DateTime? @map("effective_to")
  countActivePrivate Boolean   @map("count_active_private")
  countPreorder      Boolean   @map("count_preorder")
  countZeroPrice     Boolean   @map("count_zero_price")
  requireImage       Boolean   @map("require_image")
  requireCurrency    Boolean   @map("require_currency")
  notes              String?
  updatedBy          String    @map("updated_by")
  createdAt          DateTime  @default(now()) @map("created_at")

  @@index([scope, effectiveFrom(sort: Desc)])
  @@map("sku_billing_policy_history")
}

model EmailConfiguration {
  id        String   @id @default(cuid())
  category  String   @unique
  email     String
  updatedAt DateTime @updatedAt
  updatedBy String?

  @@index([category])
  @@map("email_configuration")
}

model UpgradeRequest {
  id            String    @id @default(cuid())
  tenantId      String    @map("tenant_id")
  businessName  String    @map("business_name")
  currentTier   String    @map("current_tier")
  requestedTier String    @map("requested_tier")
  status        String    @default("new")
  notes         String?
  adminNotes    String?   @map("admin_notes")
  processedBy   String?   @map("processed_by")
  processedAt   DateTime? @map("processed_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([status])
  @@index([createdAt])
  @@map("upgrade_requests")
}

// Organization Assignment Request model
model OrganizationRequest {
  id             String    @id @default(cuid())
  tenantId       String    @map("tenant_id")
  organizationId String    @map("organization_id")
  requestedBy    String    @map("requested_by") // User ID who made the request
  status         String    @default("pending") // pending, approved, rejected
  requestType    String    @default("join") @map("request_type") // join, leave
  estimatedCost  Float?    @map("estimated_cost")
  costCurrency   String?   @default("USD") @map("cost_currency")
  notes          String? // Tenant owner's notes
  adminNotes     String?   @map("admin_notes") // Admin's notes
  costAgreed     Boolean   @default(false) @map("cost_agreed")
  costAgreedAt   DateTime? @map("cost_agreed_at")
  processedBy    String?   @map("processed_by") // Admin user ID
  processedAt    DateTime? @map("processed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  tenant       Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([organizationId])
  @@index([status])
  @@index([requestedBy])
  @@index([createdAt])
  @@map("organization_requests")
}

model TenantBusinessProfile {
  tenantId String @id @map("tenant_id")
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  businessName   String   @map("business_name")
  addressLine1   String   @map("address_line1")
  addressLine2   String?  @map("address_line2")
  city           String
  state          String?
  postalCode     String   @map("postal_code")
  countryCode    String   @map("country_code") @db.Char(2)
  phoneNumber    String?  @map("phone_number")
  email          String?
  website        String?
  contactPerson  String? @map("contact_person")
  logoUrl        String? @map("logo_url")
  hours          Json?
  socialLinks    Json?    @map("social_links")
  seoTags        Json?    @map("seo_tags")
  latitude       Decimal?
  longitude      Decimal?
  displayMap     Boolean  @default(false) @map("display_map")
  mapPrivacyMode String   @default("precise") @map("map_privacy_mode")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("tenant_business_profile")
}

// Authentication User model
model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  passwordHash           String    @map("password_hash")
  firstName              String?   @map("first_name")
  lastName               String?   @map("last_name")
  role                   UserRole  @default(USER)
  emailVerified          Boolean   @default(false) @map("email_verified")
  emailVerificationToken String?   @map("email_verification_token")
  passwordResetToken     String?   @map("password_reset_token")
  passwordResetExpires   DateTime? @map("password_reset_expires")
  lastLogin              DateTime? @map("last_login")
  isActive               Boolean   @default(true) @map("is_active")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  tenants  UserTenant[]
  sessions UserSession[]

  @@index([email])
  @@index([role])
  @@map("users")
}

// User roles enum
enum UserRole {
  ADMIN // Platform admin
  OWNER // Business owner
  USER // Regular user

  @@map("user_role")
}

// User-Tenant relationship (many-to-many)
model UserTenant {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  tenantId  String         @map("tenant_id")
  role      UserTenantRole @default(MEMBER)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([tenantId])
  @@map("user_tenants")
}

// User role within a specific tenant
enum UserTenantRole {
  OWNER // Tenant owner
  ADMIN // Tenant admin
  MEMBER // Regular member
  VIEWER // Read-only access

  @@map("user_tenant_role")
}

// User sessions for tracking
model UserSession {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  deviceInfo String?  @map("device_info")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

enum AvailabilityStatus {
  in_stock
  out_of_stock
  preorder

  @@map("availability_status")
}

enum ProductCondition {
  new
  refurbished
  used

  @@map("product_condition")
}

enum ItemVisibility {
  public
  private

  @@map("item_visibility")
}

enum SyncStatus {
  pending
  success
  error

  @@map("sync_status")
}

enum ItemStatus {
  active
  inactive
  archived

  @@map("item_status")
}

enum ActorType {
  user
  system
  integration

  @@map("actor_type")
}

enum EntityType {
  inventory_item
  tenant
  policy
  oauth
  other

  @@map("entity_type")
}

enum AuditAction {
  create
  update
  delete
  sync
  policy_apply
  oauth_connect
  oauth_refresh

  @@map("action")
}

// Permission Matrix System
model PermissionMatrix {
  id          String           @id @default(cuid())
  role        String // 'PLATFORM_ADMIN', 'TENANT_OWNER', 'TENANT_ADMIN', 'TENANT_MEMBER', 'TENANT_VIEWER'
  action      PermissionAction // permission action enum
  allowed     Boolean          @default(false)
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@unique([role, action])
  @@index([role])
  @@index([action])
  @@map("permission_matrix")
}

enum PermissionAction {
  tenant_create          @map("tenant.create")
  tenant_read            @map("tenant.read")
  tenant_update          @map("tenant.update")
  tenant_delete          @map("tenant.delete")
  tenant_manage_users    @map("tenant.manage_users")
  inventory_create       @map("inventory.create")
  inventory_read         @map("inventory.read")
  inventory_update       @map("inventory.update")
  inventory_delete       @map("inventory.delete")
  analytics_view         @map("analytics.view")
  admin_access_dashboard @map("admin.access_dashboard")
  admin_manage_settings  @map("admin.manage_settings")

  @@map("permission_action")
}

model PermissionAuditLog {
  id        String   @id @default(cuid())
  role      String
  action    String
  oldValue  Boolean? @map("old_value")
  newValue  Boolean  @map("new_value")
  changedBy String   @map("changed_by")
  changedAt DateTime @default(now()) @map("changed_at")
  reason    String?

  @@index([role])
  @@index([changedBy])
  @@index([changedAt])
  @@map("permission_audit_log")
}
