generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  VIEWER
}

enum AvailabilityStatus {
  in_stock
  out_of_stock
  preorder

  @@map("availability_status")
}

enum ProductCondition {
  new
  refurbished
  used

  @@map("product_condition")
}

enum ItemVisibility {
  public
  private

  @@map("item_visibility")
}

enum SyncStatus {
  pending
  success
  error

  @@map("sync_status")
}

model Tenant {
  id                  String               @id @default(cuid())
  name                String
  metadata            Json?                // Business profile data (address, phone, etc.)
  createdAt           DateTime             @default(now())
  users               User[]
  items               InventoryItem[]
  photos              PhotoAsset[]
  syncJobs            SyncJob[]
  googleOAuthAccounts GoogleOAuthAccount[]
  region              String               @default("us-east-1")
  language            String               @default("en-US")
  currency            String               @default("USD")
  data_policy_accepted Boolean             @default(false)
  @@index([name])
}


model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model InventoryItem {
  id         String   @id @default(cuid())
  tenantId   String
  sku        String
  name       String
  priceCents Int      // use integer cents for SQLite to avoid float rounding
  stock      Int      @default(0)
  imageUrl   String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // SWIS fields (v3.4)
  title        String?
  brand        String?
  description  String?
  categoryPath String[]         @default([])
  price        Decimal?         @db.Decimal(12, 2)
  currency     String?          @default("USD") @db.Char(3)
  availability AvailabilityStatus? @default(in_stock)
  quantity     Int?
  condition    ProductCondition?   @default(new)
  gtin         String?
  mpn          String?
  merchantName String?
  locationId   String?
  visibility   ItemVisibility?     @default(public)
  syncStatus   SyncStatus?         @default(pending)
  syncedAt     DateTime?
  auditLogId   String?

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  photos     PhotoAsset[]

  // Each SKU must be unique within a tenant
  @@unique([tenantId, sku], name: "uq_tenant_sku")
  @@index([tenantId, updatedAt])
}

model PhotoAsset {
  id              String   @id @default(cuid())
  tenantId        String
  inventoryItemId String
  url             String
  width           Int?
  height          Int?
  contentType     String?
  bytes           Int?
  exifRemoved     Boolean  @default(true)
  capturedAt      DateTime @default(now())
  createdAt       DateTime @default(now())

  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@index([tenantId, inventoryItemId])
  @@index([capturedAt])
}

model SyncJob {
  id         String   @id @default(cuid())
  tenantId   String
  target     String
  status     String   @default("queued")
  attempt    Int      @default(0)
  payload    Json
  lastError  String?
  source     String   @default("manual") // 'manual', 'google_gmc', 'google_gbp'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status, updatedAt])
}

// Google Connect Suite Models (ENH-2026-043 + ENH-2026-044)

model GoogleOAuthAccount {
  id                  String   @id @default(cuid())
  tenantId            String   @map("tenant_id")
  googleAccountId     String   @map("google_account_id")
  email               String
  displayName         String?  @map("display_name")
  profilePictureUrl   String?  @map("profile_picture_url")
  scopes              String[]
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  tenant              Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tokens              GoogleOAuthToken?
  merchantLinks       GoogleMerchantLink[]
  gbpLocations        GbpLocation[]

  @@unique([tenantId, googleAccountId])
  @@map("google_oauth_accounts")
}

model GoogleOAuthToken {
  id                    String   @id @default(cuid())
  accountId             String   @unique @map("account_id")
  accessTokenEncrypted  String   @map("access_token_encrypted")
  refreshTokenEncrypted String   @map("refresh_token_encrypted")
  tokenType             String   @default("Bearer") @map("token_type")
  expiresAt             DateTime @map("expires_at")
  scopes                String[]
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  account               GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("google_oauth_tokens")
}

model GoogleMerchantLink {
  id           String    @id @default(cuid())
  accountId    String    @map("account_id")
  merchantId   String    @map("merchant_id")
  merchantName String?   @map("merchant_name")
  websiteUrl   String?   @map("website_url")
  isActive     Boolean   @default(true) @map("is_active")
  lastSyncAt   DateTime? @map("last_sync_at")
  syncStatus   String?   @default("pending") @map("sync_status") // 'pending', 'syncing', 'success', 'error'
  syncError    String?   @map("sync_error")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  account      GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([merchantId])
  @@map("google_merchant_links")
}

model GbpLocation {
  id             String    @id @default(cuid())
  accountId      String    @map("account_id")
  locationId     String    @map("location_id")
  locationName   String    @map("location_name")
  storeCode      String?   @map("store_code")
  address        String?
  phoneNumber    String?   @map("phone_number")
  websiteUrl     String?   @map("website_url")
  category       String?
  isVerified     Boolean?  @default(false) @map("is_verified")
  isPublished    Boolean?  @default(false) @map("is_published")
  lastFetchedAt  DateTime? @map("last_fetched_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  account        GoogleOAuthAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  insights       GbpInsightDaily[]

  @@unique([accountId, locationId])
  @@map("gbp_locations")
}

model GbpInsightDaily {
  id                String   @id @default(cuid())
  locationId        String   @map("location_id")
  date              DateTime @db.Date
  viewsSearch       Int      @default(0) @map("views_search")
  viewsMaps         Int      @default(0) @map("views_maps")
  actionsWebsite    Int      @default(0) @map("actions_website")
  actionsPhone      Int      @default(0) @map("actions_phone")
  actionsDirections Int      @default(0) @map("actions_directions")
  photosCount       Int      @default(0) @map("photos_count")
  createdAt         DateTime @default(now()) @map("created_at")

  location          GbpLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, date])
  @@index([locationId, date])
  @@map("gbp_insights_daily")
}

